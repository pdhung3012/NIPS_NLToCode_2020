@misc{000,
  title="InvocMap data",
  howpublished = "\url{https://tinyurl.com/yadjm4ws}",
   author={ InvocMap},
	month = "May",
      year = "2020",
}

@article{001,
    author = {Knuth, D. E.},
    title = "{Literate Programming}",
    journal = {The Computer Journal},
    volume = {27},
    number = {2},
    pages = {97-111},
    year = {1984},
    month = {01},
    abstract = "{The author and his associates have been experimenting for the past several years with a programming language and documentation system called WEB. This paper presents WEB by example, and discusses why the new system appears to be an improvement over previous ones.}",
    issn = {0010-4620},
    doi = {10.1093/comjnl/27.2.97},
    url = {https://doi.org/10.1093/comjnl/27.2.97},
    eprint = {https://academic.oup.com/comjnl/article-pdf/27/2/97/981657/270097.pdf},
}

@article{002,
  author    = {Quoc V. Le and
               Tomas Mikolov},
  title     = {Distributed Representations of Sentences and Documents},
  journal   = {CoRR},
  volume    = {abs/1405.4053},
  year      = {2014},
  url       = {http://arxiv.org/abs/1405.4053},
  archivePrefix = {arXiv},
  eprint    = {1405.4053},
  timestamp = {Mon, 13 Aug 2018 16:48:49 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/LeM14.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{003,
author = {Ramsey, Norman},
title = {Literate Programming Simplified},
year = {1994},
issue_date = {September 1994},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
volume = {11},
number = {5},
issn = {0740-7459},
url = {https://doi.org/10.1109/52.311070},
doi = {10.1109/52.311070},
journal = {IEEE Softw.},
month = sep,
pages = {97–105},
numpages = {9},
keywords = {software tools, feature complexity, tool acceptance, language-dependence, source file, programming, programming environments, literate programming, code extraction, literate programming tools, documentation, system documentation}
}

@misc{004,
  title="Article on problems of Literate Programming",
  howpublished = "\url{https://tinyurl.com/y6u6mzc2}",
   author={ reddit},
	month = "April",
      year = "2014",
}
@article{005,
author = {E. F. Haghish},
title ={Rethinking Literate Programming in Statistics},
journal = {The Stata Journal},
volume = {16},
number = {4},
pages = {938-963},
year = {2016},
doi = {10.1177/1536867X1601600408},

URL = { 
        https://doi.org/10.1177/1536867X1601600408
    
},
eprint = { 
        https://doi.org/10.1177/1536867X1601600408
    
}
,
    abstract = { Literate programming is becoming increasingly trendy for data analysis because it allows the generation of dynamic-analysis reports for communicating data analysis and eliminates untraceable human errors in analysis reports. Traditionally, literate programming includes separate processes for compiling the code and preparing the documentation. While this workflow might be satisfactory for software documentation, it is not ideal for writing statistical analysis reports. Instead, these processes should run in parallel. In this article, I introduce the weaver package, which examines this idea by creating a new log system in HTML or LATEX that can be used simultaneously with the Stata log system. The new log system provides many features that the Stata log system lacks; for example, it can render mathematical notations, insert figures, create publication-ready dynamic tables, and style text, and it includes a built-in syntax highlighter. The weaver package also produces dynamic PDF documents by converting the HTML log to PDF or by typesetting the LATEX log and thus provides a real-time preview of the document without recompiling the code. I also discuss potential applications of the weaver package. }
}

@misc{006,
  title="Article on problems of Literate Programming",
  howpublished = "\url{https://tinyurl.com/y85hp6y2}",
   author={ Knuth D},
	month = "April",
      year = "2020",
}



@inproceedings{007,
author = {Gvero, Tihomir and Kuncak, Viktor},
title = {Synthesizing Java Expressions from Free-Form Queries},
year = {2015},
isbn = {9781450336895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814270.2814295},
doi = {10.1145/2814270.2814295},
booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications},
pages = {416–432},
numpages = {17},
keywords = {Program Synthesis, Autocompletion, Program Repair, Natural Language Processing},
location = {Pittsburgh, PA, USA},
series = {OOPSLA 2015}
}
@article{008,
  author    = {Pengcheng Yin and
               Graham Neubig},
  title     = {A Syntactic Neural Model for General-Purpose Code Generation},
  journal   = {CoRR},
  volume    = {abs/1704.01696},
  year      = {2017},
  url       = {http://arxiv.org/abs/1704.01696},
  archivePrefix = {arXiv},
  eprint    = {1704.01696},
  timestamp = {Mon, 13 Aug 2018 16:47:27 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/YinN17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@INPROCEEDINGS{009,
  author={Y. {Oda} and H. {Fudaba} and G. {Neubig} and H. {Hata} and S. {Sakti} and T. {Toda} and S. {Nakamura}},
  booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)}, 
  title={Learning to Generate Pseudo-Code from Source Code Using Statistical Machine Translation (T)}, 
  year={2015},
  volume={},
  number={},
  pages={574-584},}

@article{010,
  author    = {Antonio Valerio Miceli Barone and
               Rico Sennrich},
  title     = {A parallel corpus of Python functions and documentation strings for
               automated code documentation and code generation},
  journal   = {CoRR},
  volume    = {abs/1707.02275},
  year      = {2017},
  url       = {http://arxiv.org/abs/1707.02275},
  archivePrefix = {arXiv},
  eprint    = {1707.02275},
  timestamp = {Mon, 13 Aug 2018 16:46:55 +0200},
  biburl    = {https://dblp.org/rec/journals/corr/BaroneS17.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@misc{011,
  title="Article on Abstract Syntax Tree",
  howpublished = "\url{https://tinyurl.com/y7tq9sdg}",
   author={ Research Article},
	month = "April",
      year = "2020",
}

@misc{012,
  title="Article on Method Invocation",
  howpublished = "\url{https://tinyurl.com/y7knpotw}",
   author={ Research Article},
	month = "April",
      year = "2020",
}

@ARTICLE{013,
       author = {{Karampatsis}, Rafael-Michael and {Babii}, Hlib and {Robbes}, Romain and
         {Sutton}, Charles and {Janes}, Andrea},
        title = "{Big Code != Big Vocabulary: Open-Vocabulary Models for Source Code}",
      journal = {arXiv e-prints},
     keywords = {Computer Science - Software Engineering},
         year = 2020,
        month = mar,
          eid = {arXiv:2003.07914},
        pages = {arXiv:2003.07914},
archivePrefix = {arXiv},
       eprint = {2003.07914},
 primaryClass = {cs.SE},
       adsurl = {https://ui.adsabs.harvard.edu/abs/2020arXiv200307914K},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@inproceedings{014,
author = {Mikolov, Tomas and Sutskever, Ilya and Chen, Kai and Corrado, Greg and Dean, Jeffrey},
title = {Distributed Representations of Words and Phrases and Their Compositionality},
year = {2013},
publisher = {Curran Associates Inc.},
address = {Red Hook, NY, USA},
booktitle = {Proceedings of the 26th International Conference on Neural Information Processing Systems - Volume 2},
pages = {3111–3119},
numpages = {9},
location = {Lake Tahoe, Nevada},
series = {NIPS’13}
}

@inproceedings{015,
 author = {Spence Green and Daniel Cer and Christopher D. Manning},
 title = {Phrasal: A Toolkit for New Directions in Statistical Machine Translation},
 booktitle = {In Proceddings of the Ninth Workshop on Statistical Machine Translation},
 year = {2014}
}

@inproceedings{016,
 author = {Koehn, Philipp and Och, Franz Josef and Marcu, Daniel},
 title = {Statistical Phrase-based Translation},
 booktitle = {Proceedings of the 2003 Conference of the North American Chapter of the Association for Computational Linguistics on Human Language Technology - Volume 1},
 series = {NAACL '03},
 year = {2003},
 location = {Edmonton, Canada},
 pages = {48--54},
 numpages = {7},
 url = {https://doi.org/10.3115/1073445.1073462},
 doi = {10.3115/1073445.1073462},
 acmid = {1073462},
 publisher = {Association for Computational Linguistics},
 address = {Stroudsburg, PA, USA},
} 

@book{017,
 author = {Jurafsky, Daniel and Martin, James H.},
 title = {Speech and Language Processing (2Nd Edition)},
 year = {2009},
 isbn = {0131873210},
 publisher = {Prentice-Hall, Inc.},
 address = {Upper Saddle River, NJ, USA},
} 

@INPROCEEDINGS{018, 
author={H. {Liu}}, 
booktitle={2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C)}, 
title={Towards Better Program Obfuscation: Optimization via Language Models}, 
year={2016}, 
volume={}, 
number={}, 
pages={680-682}, 
keywords={binary codes;Markov processes;Monte Carlo methods;optimisation;security of data;software engineering;software development;program obfuscation;binary code;obfuscation techniques;MCMC;Monte Carlo Markov Chain based search algorithm;JavaScript programs;Closure tool;Optimization;Software engineering;Software;Computer science;Google;Reverse engineering;Natural language processing;obfuscation;obscurity language model;MCMC random search}, 
doi={}, 
ISSN={}, 
month={May},}

@article{019,
title	= {Google's Neural Machine Translation System: Bridging the Gap between Human and Machine Translation},
author	= {Yonghui Wu and Mike Schuster and Zhifeng Chen and Quoc V. Le and Mohammad Norouzi and Wolfgang Macherey and Maxim Krikun and Yuan Cao and Qin Gao and Klaus Macherey and Jeff Klingner and Apurva Shah and Melvin Johnson and Xiaobing Liu and Łukasz Kaiser and Stephan Gouws and Yoshikiyo Kato and Taku Kudo and Hideto Kazawa and Keith Stevens and George Kurian and Nishant Patil and Wei Wang and Cliff Young and Jason Smith and Jason Riesa and Alex Rudnick and Oriol Vinyals and Greg Corrado and Macduff Hughes and Jeffrey Dean},
year	= {2016},
URL	= {http://arxiv.org/abs/1609.08144},
journal	= {CoRR},
volume	= {abs/1609.08144}
}

@misc{020,
  title="ProgramCreek",
  howpublished = "\url{https://tinyurl.com/y93rah3r}",
   author={ProgramCreek},
	month = "April",
      year = "2020",
}

@misc{021,
  title="StackOverflow",
  howpublished = "\url{https://tinyurl.com/pmtltux}",
   author={StackOverflow},
	month = "April",
      year = "2020",
}

@inproceedings{022,
author = {Phan, Hung and Nguyen, Hoan Anh and Tran, Ngoc M. and Truong, Linh H. and Nguyen, Anh Tuan and Nguyen, Tien N.},
title = {Statistical Learning of API Fully Qualified Names in Code Snippets of Online Forums},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3180230},
doi = {10.1145/3180155.3180230},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {632–642},
numpages = {11},
keywords = {type inference, type resolution, statistical machine translation, type annotations, big code, naturalness, partial program analysis},
location = {Gothenburg, Sweden},
series = {ICSE ’18}
}

@misc{023,
  title="Gensim Doc2Vec library",
  howpublished = "\url{https://tinyurl.com/y7eojef3}",
   author={Gensim},
	month = "April",
      year = "2020",
}

@misc{024,
  title="Levenshtein distance",
  howpublished = "\url{https://tinyurl.com/ybp4nr9t}",
   author={dzone website},
	month = "April",
      year = "2020",
}


@article{025,
author = {Pulido-Prieto, Oscar and Ju\'{a}rez-Mart\'{\i}nez, Ulises},
title = {A Survey of Naturalistic Programming Technologies},
year = {2017},
issue_date = {November 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {5},
issn = {0360-0300},
url = {https://doi.org/10.1145/3109481},
doi = {10.1145/3109481},
journal = {ACM Comput. Surv.},
month = sep,
articleno = {70},
numpages = {35},
keywords = {expressiveness, Naturalistic programming, controlled natural english, automatic source code generation}
}

@inproceedings{026, author = {Price, David and Rilofff, Ellen and Zachary, Joseph and Harvey, Brandon}, title = {NaturalJava: A Natural Language Interface for Programming in Java}, year = {2000}, isbn = {1581131348}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/325737.325845}, doi = {10.1145/325737.325845}, booktitle = {Proceedings of the 5th International Conference on Intelligent User Interfaces}, pages = {207–211}, numpages = {5}, keywords = {computer program editors, intelligent user interfaces, programming environments, natural language processing, information extraction}, location = {New Orleans, Louisiana, USA}, series = {IUI ’00} }

@inproceedings{027, author = {Nguyen, Thanh and Rigby, Peter C. and Nguyen, Anh Tuan and Karanfil, Mark and Nguyen, Tien N.}, title = {T2API: Synthesizing API Code Usage Templates from English Texts with Statistical Translation}, year = {2016}, isbn = {9781450342186}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/2950290.2983931}, doi = {10.1145/2950290.2983931}, booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering}, pages = {1013–1017}, numpages = {5}, keywords = {API Usage Synthesis, Graph-based Statistical Machine Translation, Text-to-Code Translation}, location = {Seattle, WA, USA}, series = {FSE 2016} }

@inproceedings{028, author = {Nguyen, Thanh V. and Nguyen, Tien N.}, title = {Inferring API Elements Relevant to an English Query}, year = {2018}, isbn = {9781450356633}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/3183440.3195079}, doi = {10.1145/3183440.3195079}, booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings}, pages = {167–168}, numpages = {2}, keywords = {text-to-code translation, API elements, machine translation}, location = {Gothenburg, Sweden}, series = {ICSE ’18} }

@misc{029,
    title={Multi-modal Synthesis of Regular Expressions},
    author={Qiaochu Chen and Xinyu Wang and Xi Ye and Greg Durrett and Isil Dillig},
    year={2019},
    eprint={1908.03316},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}

@article{030,
title = "Towards naturalistic programming: Mapping language-independent requirements to constrained language specifications",
journal = "Science of Computer Programming",
volume = "166",
pages = "89 - 119",
year = "2018",
issn = "0167-6423",
doi = "https://doi.org/10.1016/j.scico.2018.05.006",
url = "http://www.sciencedirect.com/science/article/pii/S0167642318301941",
author = "Mariem Mefteh and Nadia Bouassida and HanÃªne Ben-Abdallah",
keywords = "Natural language processing, Patterns, Semantics, Multilingual requirements, Use case scenarios",
abstract = "This research paper presents a new approach that constitutes a first step towards programming using language-independent requirements. To leverage the needed programming effort, our approach takes requirements in the form of language-independent use case scenarios. Then, it generates the inputs of a code generator which, in turn, produces the corresponding code. To provide for the language-independence, our approach uses an enriched version of the semantic model, as a means to represent similar ideas possibly in different ways and in different natural languages. The enrichment consists of a set of patterns that it implements as XML code representing the information embedded in the use case scenarios. This intermediate representation can be processed to derive the inputs required by any code generator to produce code in a particular programming language. This paper illustrates the approach and its tool support for use case scenarios written in English and French, and semantic model patterns implemented as XML code that can be processed by the ReDSeeDS code generator. In addition, it presents the results of an experimental evaluation of the approach on use case scenarios (written in English and in French) belonging to five different systems. This evaluation quantitatively shows the ability of our approach: to extract ReDSeeDS inputs conforming to the expert's inputs with a high precision; to generate XML code elements conforming to the input with an encouraging performance as evaluated by the participating students (an F-measure ranging between 87.43% and 92.31%); and to generate Java code judged efficient by the participating programmers (an F-measure ranging between 66.4% and 93.43%)."
}

@InProceedings{031,
author="Mashima, Yoshiki
and Hirokawa, Sachio
and Takeuchi, Kazuhiro",
editor="Seki, Hirosato
and Nguyen, Canh Hao
and Huynh, Van-Nam
and Inuiguchi, Masahiro",
title="Ties Between Mined Structural Patterns in Program and Their Identifier Names",
booktitle="Integrated Uncertainty in Knowledge Modelling and Decision Making",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="335--346",
abstract="Identifier names in readable and maintainable source codes are always descriptive. These names are given based on the implicit knowledge of experienced programmers. In this paper, we propose a structural pattern mining method based on support vector machines (SVM) for source codes. We extract 1,000 method names in object-oriented source codes collected from online software repositories and create 1,000 datasets labeled by positive and negative class. The structural features used for the input feature vectors to the SVM learning are designed for representing partial characteristics in the abstract syntax tree (AST) parsed from a source code. Applying this method, we made an F1 score list of the 1,000 method names, which shows the degree of patterning of each name, by using our structural features. From the list, we confirmed structural patterns were strongly associated with specific method names. A qualitative evaluation of method names was also conducted by mapping the structural feature vector of each program example to the two-dimensional plane in the same way as a previous major study. From the evaluation, we confirmed that the contrasting structure among the programs corresponds to the names given to programs. Furthermore, we show examples of visualization of structural patterns using structural features extracted by feature selection.",
isbn="978-3-030-14815-7"
}

@INPROCEEDINGS{032,
  author={K. {Shimonaka} and Y. {Higo} and J. {Matsumoto} and K. {Naito} and S. {Kusumoto}},
  booktitle={2018 IEEE 12th International Workshop on Software Clones (IWSC)}, 
  title={Towards automated generation of Java methods: A way of automated reuse-based programming}, 
  year={2018},
  volume={},
  number={},
  pages={30-36},}
  
  @INPROCEEDINGS{033,
  author={T. {Yamamoto}},
  booktitle={2017 24th Asia-Pacific Software Engineering Conference (APSEC)}, 
  title={Code Suggestion of Method Call Statements Using a Source Code Corpus}, 
  year={2017},
  volume={},
  number={},
  pages={666-671},}
  
  @inproceedings{034, author = {Bielik, Pavol and Raychev, Veselin and Vechev, Martin}, title = {PHOG: Probabilistic Model for Code}, year = {2016}, publisher = {JMLR.org}, booktitle = {Proceedings of the 33rd International Conference on International Conference on Machine Learning - Volume 48}, pages = {2933–2942}, numpages = {10}, location = {New York, NY, USA}, series = {ICML’16} }

@inproceedings{035, author = {Bichsel, Benjamin and Raychev, Veselin and Tsankov, Petar and Vechev, Martin}, title = {Statistical Deobfuscation of Android Applications}, year = {2016}, isbn = {9781450341394}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, url = {https://doi.org/10.1145/2976749.2978422}, doi = {10.1145/2976749.2978422}, booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security}, pages = {343–355}, numpages = {13}, keywords = {program deobfuscation, reverse engineering, malware inspection}, location = {Vienna, Austria}, series = {CCS ’16} }

@article{036, author = {Feng, Yu and Martins, Ruben and Wang, Yuepeng and Dillig, Isil and Reps, Thomas W.}, title = {Component-Based Synthesis for Complex APIs}, year = {2017}, issue_date = {January 2017}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {52}, number = {1}, issn = {0362-1340}, url = {https://doi.org/10.1145/3093333.3009851}, doi = {10.1145/3093333.3009851}, journal = {SIGPLAN Not.}, month = jan, pages = {599–612}, numpages = {14}, keywords = {Type-directed, Component-based, Petri-net, Program Synthesis} }

@misc{037,
    title={Deep API Learning},
    author={Xiaodong Gu and Hongyu Zhang and Dongmei Zhang and Sunghun Kim},
    year={2016},
    eprint={1605.08535},
    archivePrefix={arXiv},
    primaryClass={cs.SE}
}